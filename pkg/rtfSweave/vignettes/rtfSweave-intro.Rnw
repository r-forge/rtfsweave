\documentclass[11pt]{article}
\usepackage{url}
\usepackage{graphicx}
\usepackage{alltt}% See http://en.wikibooks.org/wiki/LaTeX/Paragraph_Formatting#Verbatim_text
\addtolength{\topmargin}{-0.5in}
\addtolength{\textheight}{0.75in}
\addtolength{\oddsidemargin}{-0.5in}
\addtolength{\textwidth}{1in}

\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\pkg}[1]{\texttt{#1}}
\newcommand{\var}[1]{\emph{#1}}

\title{An introduction to RTF and the \pkg{rtfSweave} package}
\author{Stephen Weigand \texttt{weigand@mayo.edu}}

\begin{document}
\maketitle
\tableofcontents
\section{Overview}

In this document I try to provide some very basic information about
RTF and show how to use the \pkg{rtfSweave} package with
\code{Sweave} to make RTF statistical reports.  For me, the key to understanding
RTF was reading the excellent \emph{RTF Pocket Guide} by Sean
Burke\cite{guide}.  It covers important aspects of RTF and only after reading it did I
find that the RTF specifications published
by Microsoft made some sense. The \emph{Pocket Guide} can be downloaded as a PDF from
the publisher's website (currently
\url{http://shop.oreilly.com/product/9780596004750.do}). 

Rich Text Format (RTF) is a mark-up language in that RTF files are
plain text files containing document ``content'' such as text, tables,
and figures along with commands indicating how these should be
displayed. %\footnote{Bitmap
%  figures are incorporated into the RTF file itself by converting them from their
%  binary representation to a hexadecimal character representation.} 
In this sense, RTF is somewhat similar to HTML or \LaTeX. RTF was
developed by Microsoft and is tightly integrated into Microsoft
Word (MS Word), so much so that RTF is essentially a text-based interface to Word
documents. If you are creating a statistical report for an MS Word user, 
there may be an advantage to writing the RTF directly rather than having to 
use a converter from \LaTeX or other format. This should not be taken as
arguing that RTF is a replacement for \LaTeX.
%While other
%\textsf{R} packages facilitate writing HTML or \LaTeX, the results
%must then be converted if the reader expects or requires a document in MS
%Word.  

One important way that RTF differs in spirit from HTML or \LaTeX\ is
that in the RTF specification there is much less separation between
content and presentation.%\footnote{RTF does have so-called sytles but
%  they are...} 
For example, headings in an RTF document are really just
short paragraphs with special formatting and not structural elements.
%In this way, RTF behaves like a page markup language

%% The \emph{RTF Pocket Guide} is an excellent basic introduction to
%% RTF\cite{guide} and the latest RTF version specification can
%% be downloaded from Microsoft as a MS Word document.

At this point, it may make sense to show an example of an RTF document. Here
is the ``Hello, world!'' example from the \emph{Pocket Guide}. Note
that RTF has no built-in comments so I am using ``\texttt{//}'' to indicate
``pseudo-comments'' which annotate the file.

\begin{figure}[htbp]
  \centering
\begin{minipage}{0.9\textwidth}
\begin{verbatim}
{\rtf1                 // RTF version 1, your only choice
\ansi                  // Document is in the ANSI character set 

\deff0                 // Default font is font 0, defined below
\deflang1033           // Default language code 1033 = en-us
\plain \fs24           // Plain format has fontsize 24/2 = 12 points

{\fonttbl              // Font table
{\f0 Times New Roman;} // Font 0 defined as Times New Roman
{\f1 Arial;}           // Font 1 defined as Arial
}

{\pard \fs28 \b        // Paragraph set at 28/2 = 14 pts in bold
Greeting               //   to resemble a level-1 heading
\par}                  // End paragraph

{\pard                 // New paragraph set with "plain" formatting
Hello, World!
\par}                  // End paragraph
}
\end{verbatim}
\end{minipage}
\caption{An annotated RTF version of ``Hello, World!''}
\end{figure}

\section{Document prolog}

The \emph{Guide} has information on the prolog. In it you define some
document defaults, a font table, a color table (optional), and an info
group containing metadata (optional).

\section{Paragraphs}

RTF has a paragraph entity, but no heading entities. This means that
headings are just paragraphs with special formatting such as boldface
type. Following the {\emph Pocket Guide}\cite{guide},
paragraphs are written using the following form.\footnote{Note that there are
 no spaces at the end of these lines. If there were they would
 show up as extraneous spaces in the document. Blank lines don't matter in RTF but spaces do.}

\begin{verbatim}
{\pard
A short paragraph.
\par}
\end{verbatim}

Formatting instructions for the paragraph can follow the
\texttt{\textbackslash pard} command on the same line.  For many
size-related commands, the units are in ``twips'' where one twip
equals one twentieth of a point. (If 20 twips equals 1 point, and 72
points/inch, then there are $72 \times 20 = 1440$ twips per
inch.\footnote{My guess is that twips were used to allow RTF commands
  to be specified in integer units.}) One exception is that text sizes
are specified in half points.  To illustrate, the following paragraph
has 120 twips (six points) of space before and after the paragraph and
is set in font zero at 24 half points (12 points). A single space after the RTF commands
is optional but helps readability.
%%\footnote{A twip is a standard unit of measurement
%% in RTF and equals one twentieth of a point. If there are 72 points to an inch, there are
%% $72 \times 20 = 1440$ twips per) of space before the
%%the paragraph (\texttt{\textbackslash sb120}}) and the same amount after the paragraph
%%\texttt{\textbackslash sa120}). The paragraph is displayed in the default 
%%font (font zero, i.e., \texttt{\textbackslash f0}) at a font size of 12 points, or 24 half points
%%(\texttt{\textbackslash fs24}).

\begin{minipage}{0.9\textwidth}
\begin{verbatim}
{\pard \sb120 \sa120 \f0 \fs24
A short paragraph.
\par}
\end{verbatim}
\end{minipage}

If the paragraph you are writing is more than one line, a helpful
way to handle spaces is to indent everything after the first line with a space.
That way, it will be easy to see that there are no inadvertent spaces
at the end of a line. This is an example.
\begin{verbatim}
{\pard \sb120 \sa120 \f0 \fs24
A short paragraph that
 is written in multiple
 lines.
\par}
\end{verbatim}


A heading paragraph is similar but with additional formatting
instructions. The following creates the appearance of a heading by being displayed in
font 1 (\texttt{\textbackslash f1}), at 16 points
(\texttt{\textbackslash fs32}) and in bold (\texttt{\textbackslash
  b}). The command \texttt{\textbackslash keepn} keeps the headling-like
paragraph on the same page as the paragraph that follows it.
\begin{verbatim}
{\pard \sb120 \sa120 \f1 \fs32 \b \keepn
Introduction
\par}
\end{verbatim}

The mark-up is readable but verbose. One simple
solution is to come up with some macro-like
substitutions and write a function to
``preprocess'' the file to do search and replace.
For example, one could write \texttt{\textbackslash paragraph} in
documentation chunks and use R to replace this pseudo command with
valid RTF commands to specify, for example, $120/20=6$ points of space before
and after the paragraph, and text set in font zero at 12 points.

<<>>=
preprocess <- function(original.rtf, new.rtf){
  doc <- readLines(original.rtf)
  doc <-
    sub("^{\\paragraph$",
        "{\\pard \\sb120 \\sa120 \\f0 \\fs24",
        doc)
  writeLines(doc, new.rtf)
}
@ 

With these kind of substitutions specifying paragraphs, sections,
subsections, etc, the document can be made more readable and much
easier to write.

\section{Figures}
PNG, JPEG, or Windows enhanced metafile (EMF) images can be 
included in an RTF document by converting the image file to
text using a hexdump and wrapping it in some RTF control commands. 
(See \url{http://en.wikipedia.org/wiki/Hex_dump} 
for details on a hexdump.)

Here is a partial example of RTF that would display a PNG
file in a paragrap by itself.

\begin{verbatim}
{\pard{\pict\pngblip
8950 4e47 0d0a 1a0a 0000 000d 4948 4452
0000 0064 0000 0064 0803 0000 0047 3c65
6600 0000 0650 4c54 4500 0000 ffff ffa5
...
5771 c762 1cd6 f1ed 15bf 211b b221 2b21
3f2f a623 9b76 0cff 8d00 0000 0049 454e
44ae 4260 8200}\par}
\end{verbatim}

This type of hexdump can be generated as follows.
<<>>=
tmp <- tempfile()
png(tmp, height = 2, width = 2, units = "in", res = 10)
plot(1:10)
dev.off()

size <- file.info(tmp)$size
hex <- readBin(tmp, what = "raw", size)
cat(hex, fill = 60, sep = " ")
@ 

\section{Tables}

Tables in RTF are defined by a sequence of independent
 table rows defined by 
the \texttt{\{\textbackslash trowd} $\dots$ \texttt{\textbackslash row\}}
construct. Each row consists of some number of ``cells.''
Here is a simple two-row table where each row has
three cells (which are displayed as columns).

\begin{verbatim}
{\trowd 
\cellx1440\cellx2880\cellx4320
\pard\intbl Aligator \cell
\pard\intbl Bear \cell
\pard\intbl Cat \cell
\row}

{\trowd 
\cellx1440\cellx2880\cellx4320
\pard\intbl Dog \cell
\pard\intbl Elephant \cell
\pard\intbl Fox \cell
\row}
\end{verbatim}

The \texttt{\textbackslash cellx} control word specifies where the
right margin of the cell is placed relative to the page margin.  In
both rows above, the first cell's right edge is at 1440 twips (1
inch) from the page margin, the second cell's right edge is at 
2880 twips (2 inches), and
the third cell's right margin is at 4320 twips (3 inches). 

\section{Using \pkg{rtfSweave}}

At present, the \pkg{rtfSweave} simply provides a driver so
that \code{Sweave} can process an RTF file. Assuming that
the file with text and code is \texttt{myreport.Rnw},
the commands to process the file are
\begin{verbatim}
require("rtfSweave")
Sweave("myreport.Rnw", driver = RweaveRtf(),
       syntax = SweaveSyntaxRtf)
\end{verbatim}
Actually, the \code{syntax} argument is not necessary because 
\code{Sweave} is smart enough to find the right syntax object,
\code{SweaveSyntaxRtf}.  

This syntax object closely follows the \code{SweaveSyntaxNoweb}
object and therefore, code chunks are defined by
\begin{alltt}
\phantom{}<<optional label, \emph{various options}>>=
\emph{Your code here}
\phantom{}@ 
\end{alltt}
To include R code in text chunks, use \texttt{\{\textbackslash Sexr <code> \}}.



\subsection{File naming conventions}
W

\begin{thebibliography}{9}
  \bibitem{guide}
    Sean M Burke, \emph{RTF Pocket Guide}. O'Reilly, 2003.
\end{thebibliography}
\end{document}
